/**
 * Naive parser that returns an object fitted for D3 rendering
 *
 * expects an object (JSON parse beforehand if necessary)
 * @param {Object} input layout of the object to be parsed
 */

// Tree structure from data
function Data(name) {
  this.name = name;
  this.markedInSearch = false;
}

function parse(name = 'App', input) {
  if (input) {
    const result = new Data(name);
    result.children = new Array(0);
    for (const el of Object.entries(input)) {
      // filter out keys starting with '$' and '__typename' generated by Apollo
      if (typeof el[1] === 'object') {
        if (!el[0].startsWith('$') && el[0] !== '__typename') {
          result.children.push(parse(el[0], el[1]));
        }
      } else if (!el[0].startsWith('$') && el[0] !== '__typename') {
        const newChild = new Data(el[0]);
        newChild.value = el[1];
        result.children.push(newChild);
      }
    }
    return result;
  }
  const emptyObject = new Data('root');
  return emptyObject;
}

export { parse, Data };
